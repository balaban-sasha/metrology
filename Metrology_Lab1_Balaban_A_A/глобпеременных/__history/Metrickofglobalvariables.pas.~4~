unit Metrickofglobalvariables;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants,
  System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.StdCtrls;

type
  Tmetrick = class(TForm)
    butforopenfile: TButton;
    DialogFoFileOpening: TOpenDialog;
    start: TButton;
    windowsformetrick: TMemo;
    Changethecode: TButton;
    procedure butforopenfileClick(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure startClick(Sender: TObject);
    procedure ChangethecodeClick(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

type
  Typelistofvariables = ^listofvariables;

  listofvariables = record
    thevariables: string;
    next: Typelistofvariables;
  end;

  Typelistofsubroutinsvariables = ^listofsubroutinsvariables;

  listofsubroutinsvariables = record
    thevariables: string;
    next: Typelistofsubroutinsvariables;
  end;

  Typesetofchar = set of ansichar;

const
  const_numberzero = 0;
  const_numberone = 1;
  const_numbertwo = 2;
  const_numberthree = 3;
  const_numberfour = 4;
  const_numberfive = 5;
  const_numbersix = 6;
  const_numberseven = 7;
  const_numbereight = 8;
  const_numbernine = 9;
  const_numberten = 10;
  const_php = '<?php';
  const_phpwithspace = '<?php ';
  const_thestartofprogrammbody = '{';
  const_theendofprogrammbody = '}';
  const_thestartofcomments = '/*';
  const_theendofcomments = '*/';
  const_thedollar = '$';
  const_theendofoperator = ';';
  const_theendofline = '#13#10';
  const_thelineofcomments = '//';
  const_thespace = ' ';
  const_thenullstring = '';
  const_thequote = '''';
  const_thedoublequote = '"';
  const_theglobals = 'globals[';
  const_theglobal = 'global';
  const_theprocedure = 'procedure';
  const_thefunction = 'function';
  const_theecho = 'echo';
  const_theif = 'if';
  const_theclass = 'class';
  const_thefor = 'for';
  const_thetextforwindowsforcode = 'The code:';
  const_thesession = '$_session[';

var
  metrick: Tmetrick;
  waytofile, phpcode: string;
  fileofphpcode: textfile;
  thevariables, thefirstvariables: Typelistofvariables;
  setofsymbols: set of ansichar = ['=', ' ', ')', '(', '[', ']', '<', '>', ';',
    ',', '+', '-'];
  subroutinevariables, firstofsubroutinevariables
    : Typelistofsubroutinsvariables;

implementation

{$R *.dfm}

procedure textforwindowsformetric(var windowsformetrick: TMemo;
  indexofglobalvariables, indexofsubroutins, indexofglobalvariablesinsubroutins
  : integer);
begin
  windowsformetrick.lines.Add
    ('The number of vars in main body of programm is:');
  windowsformetrick.lines.Add(inttostr(indexofglobalvariables));
  windowsformetrick.lines.Add('The number of subroutins is:');
  windowsformetrick.lines.Add(inttostr(indexofsubroutins));
  windowsformetrick.lines.Add('The number of applies to global vars is :');
  windowsformetrick.lines.Add(inttostr(indexofglobalvariablesinsubroutins));
  windowsformetrick.lines.Add
    ('The result of metricks of applies to global vars is:');

end;

procedure skipthealgorithm(phpcode: string; nameofcycle: string;
  sizeofcycle: integer; var startposition: integer);
var
  numberofbracesthatopen: integer;
begin
  numberofbracesthatopen := const_numberzero;
  if ansilowercase(copy(phpcode, startposition, sizeofcycle)) = nameofcycle then
  begin
    while (copy(phpcode, startposition, const_numberone) <>
      const_theendofoperator) and (copy(phpcode, startposition, const_numberone)
      <> const_thestartofprogrammbody) do
      inc(startposition);
    if copy(phpcode, startposition, const_numberone) = const_thestartofprogrammbody
    then
    begin
      inc(numberofbracesthatopen);
    end;
    while numberofbracesthatopen <> const_numberzero do
    begin
      inc(startposition);
      if (copy(phpcode, startposition, const_numberone)
        = const_thestartofprogrammbody) then
        inc(numberofbracesthatopen);
      if (copy(phpcode, startposition, const_numberone)
        = const_theendofprogrammbody) then
        dec(numberofbracesthatopen);
    end;
  end;
end;

function findinlistofvariables(thevariables, thefirstvariables
  : Typelistofvariables; variablethatneedtoput: string): boolean;
begin
  result := false;
  thevariables := thefirstvariables;
  if thevariables^.next <> nil then
    while (thevariables^.next <> nil) and
      (thevariables^.thevariables <> variablethatneedtoput) do
      thevariables := thevariables^.next;
  if (thevariables = nil) or
    (thevariables^.thevariables <> variablethatneedtoput) then
    result := true;
end;

procedure addtolistofvariables(var thevariables: Typelistofvariables;
  variablethatneedtoput: string);
begin
  new(thevariables^.next);
  thevariables := thevariables^.next;
  thevariables.thevariables := variablethatneedtoput;
  thevariables^.next := nil;
end;

function findinlistofsubroutinevariables(thevariables, thefirstvariables
  : Typelistofsubroutinsvariables; variablethatneedtoput: string): boolean;
begin
  result := false;
  thevariables := thefirstvariables;
  if thevariables <> nil then
    while (thevariables <> nil) and
      (thevariables^.thevariables <> variablethatneedtoput) do
      thevariables := thevariables^.next;
  if (thevariables = nil) or
    (thevariables^.thevariables <> variablethatneedtoput) then
    result := true;
end;

procedure addtolistofsubroutinevariables(var thevariables
  : Typelistofsubroutinsvariables; variablethatneedtoput: string);
begin
  new(thevariables^.next);
  thevariables := thevariables^.next;
  thevariables.thevariables := variablethatneedtoput;
  thevariables^.next := nil;
end;

procedure skipthesubroutine(phpcode: string; nameofsubroutine: string;
  sizeofsubroutine: integer; var startposition: integer;
  setofsymbols: Typesetofchar; var indexofsubroutins,
  indexofglobalvariablesinsubroutins: integer);
var
  numberofbracesthatopen, j: integer;
begin
  numberofbracesthatopen := const_numberzero;
  if ansilowercase(copy(phpcode, startposition, sizeofsubroutine)) = nameofsubroutine
  then
  begin
    inc(indexofsubroutins);

    while (copy(phpcode, startposition, const_numberone) <>
      const_theendofoperator) and (copy(phpcode, startposition, const_numberone)
      <> const_thestartofprogrammbody) do
      inc(startposition);

    if copy(phpcode, startposition, const_numberone) = const_thestartofprogrammbody
    then
      inc(numberofbracesthatopen);

    while numberofbracesthatopen <> const_numberzero do
    begin
      inc(startposition);
      if ansilowercase(copy(phpcode, startposition, const_numberten)) = const_thesession
      then
      begin
        j := startposition + const_numberten + const_numberone;

        startposition := j;
        while not(phpcode[j] in setofsymbols) do
          inc(j);
        j := j - const_numbertwo;
        if ((firstofsubroutinevariables = nil) and
          not(findinlistofvariables(thevariables, thefirstvariables,
          copy(phpcode, startposition, j - startposition + const_numberone))))
        then
        begin
          new(subroutinevariables);
          subroutinevariables^.thevariables := const_thedollar +
            copy(phpcode, startposition, j - startposition);
          subroutinevariables^.next := nil;
          firstofsubroutinevariables := subroutinevariables;
          inc(indexofglobalvariablesinsubroutins);
        end

        else if (findinlistofsubroutinevariables(subroutinevariables,
          firstofsubroutinevariables, const_thedollar + copy(phpcode,
          startposition, j - startposition + const_numberone)) and
          not(findinlistofvariables(thevariables, thefirstvariables,
          const_thedollar + copy(phpcode, startposition,
          j - startposition + const_numberone)))) then
        begin
          addtolistofsubroutinevariables(subroutinevariables,
            const_thedollar + copy(phpcode, startposition,
            j - startposition + const_numberone));
          inc(indexofglobalvariablesinsubroutins);
        end;

        startposition := j - const_numberone;
      end;

      if ansilowercase(copy(phpcode, startposition, const_numbersix)) = const_theglobal
      then
      begin
        j := startposition + const_numberfive;
        while copy(phpcode, j, const_numberone) <> const_theendofoperator do
        begin
          if copy(phpcode, j, const_numberone) = const_thedollar then
          begin
            startposition := j;
            while not(phpcode[j] in setofsymbols) do
              inc(j);

            if ((firstofsubroutinevariables = nil) and
              not(findinlistofvariables(thevariables, thefirstvariables,
              copy(phpcode, startposition, j - startposition)))) then
            begin
              new(subroutinevariables);
              subroutinevariables^.thevariables :=
                copy(phpcode, startposition, j - startposition);
              subroutinevariables^.next := nil;
              firstofsubroutinevariables := subroutinevariables;
              inc(indexofglobalvariablesinsubroutins);
            end

            else if (findinlistofsubroutinevariables(subroutinevariables,
              firstofsubroutinevariables, copy(phpcode, startposition,
              j - startposition)) and not(findinlistofvariables(thevariables,
              thefirstvariables, copy(phpcode, startposition,
              j - startposition)))) then
            begin
              addtolistofsubroutinevariables(subroutinevariables,
                copy(phpcode, startposition, j - startposition));
              inc(indexofglobalvariablesinsubroutins);
            end;

            startposition := j - const_numberone;
          end
          else
            inc(j);
        end;
      end;

      if copy(phpcode, startposition, const_numberone) = const_thedollar then
      begin
        j := startposition;

        while not(phpcode[j] in setofsymbols) do
          inc(j);

        if not(findinlistofsubroutinevariables(subroutinevariables,
          firstofsubroutinevariables, copy(phpcode, startposition,
          j - startposition))) then

          startposition := j;
      end;

      if (copy(phpcode, startposition, const_numberone)
        = const_thestartofprogrammbody) then
        inc(numberofbracesthatopen);

      if (copy(phpcode, startposition, const_numberone)
        = const_theendofprogrammbody) then
        dec(numberofbracesthatopen);

    end;
  end;
end;

procedure writetowindowsforcode(plaintext: string; windowsformetrick: TMemo);

var
  startposition, j: integer;
  flagforconditionschecking: boolean;
  textfromcode: string;
begin
  j := const_numberone;
  startposition := const_numberone;
  flagforconditionschecking := true;
  windowsformetrick.text := const_thetextforwindowsforcode;

  while flagforconditionschecking do
  begin
    textfromcode := copy(plaintext, startposition, const_numbersix);

    while (textfromcode <> const_theendofline) and
      (startposition <= length(plaintext) - const_numberfive) do
    begin
      inc(startposition);
      textfromcode := copy(plaintext, startposition, const_numbersix);
    end;

    if startposition <= length(plaintext) then
      windowsformetrick.lines.Add(copy(plaintext, j, startposition - j))
    else
      flagforconditionschecking := false;

    j := startposition + const_numbersix;
    startposition := j;
  end;

end;

procedure create_and_nill_the_lists_of_variables();
begin
  new(thefirstvariables);
  thefirstvariables := nil;
  new(thevariables);
  thevariables := nil;
  new(subroutinevariables);
  subroutinevariables := nil;
  new(firstofsubroutinevariables);
  firstofsubroutinevariables := nil;
end;

procedure Tmetrick.butforopenfileClick(Sender: TObject);
var
  linefromcode: string;
begin
  linefromcode := const_thenullstring;
  phpcode := const_thenullstring;
  DialogFoFileOpening.FileName := const_thenullstring;
  waytofile := const_thenullstring;

  if DialogFoFileOpening.execute then
    waytofile := DialogFoFileOpening.FileName;

  if waytofile <> const_thenullstring then
  begin
    windowsformetrick.text := const_thenullstring;
    assignfile(fileofphpcode, waytofile);
    reset(fileofphpcode);

    while not(eof(fileofphpcode)) do
    begin
      readln(fileofphpcode, linefromcode);
      phpcode := phpcode + linefromcode + const_theendofline;

      if windowsformetrick.text = const_thenullstring then
        windowsformetrick.text := linefromcode + const_theendofline
      else
        windowsformetrick.lines.Add(linefromcode + const_theendofline);

    end;

    closefile(fileofphpcode);
    windowsformetrick.ReadOnly := false;
  end
  else
    showmessage('Choose the file for metricks calculation');

end;

procedure Tmetrick.ChangethecodeClick(Sender: TObject);
begin
  phpcode := windowsformetrick.text;
end;

procedure Tmetrick.FormCreate(Sender: TObject);
begin
  waytofile := const_thenullstring;
  windowsformetrick.text := const_thenullstring;
end;

procedure Tmetrick.startClick(Sender: TObject);
var
  somesymbolsfromcode: string;
  startposition, j, indexofsubroutins, indexofglobalvariablesinsubroutins,
    indexofglobalvariables: integer;
  flagforconditionschecking: boolean;
begin
  create_and_nill_the_lists_of_variables();

  windowsformetrick.text := const_thenullstring;
  indexofsubroutins := const_numberzero;
  indexofglobalvariablesinsubroutins := const_numberzero;
  indexofglobalvariables := const_numberzero;
  startposition := const_numberone;
  somesymbolsfromcode := copy(phpcode, startposition, const_numberfive);

  while ((copy(phpcode, startposition, const_numbersix) <> const_phpwithspace)
    and (startposition <= (length(phpcode) - const_numberfive))) and
    ((somesymbolsfromcode <> const_php) or
    (copy(phpcode, startposition + const_numberfive, const_numbersix) <>
    const_theendofline)) do
  begin
    inc(startposition);
    somesymbolsfromcode := copy(phpcode, startposition, const_numberfive);
  end;

  if (copy(phpcode, startposition, const_numbersix) = const_phpwithspace) or
    ((somesymbolsfromcode = const_php) and
    (copy(phpcode, startposition + const_numberfive, const_numbersix)
    = const_theendofline)) then
  begin
    delete(phpcode, const_numberone, startposition - const_numberone);
    startposition := const_numberone;

    while startposition <= (length(phpcode) - const_numberseven) do
    begin
      somesymbolsfromcode := copy(phpcode, startposition, const_numbertwo);

      while ((somesymbolsfromcode <> const_thestartofcomments) and
        ((length(phpcode) - const_numberone) >= startposition)) do
      begin
        inc(startposition);
        somesymbolsfromcode := copy(phpcode, startposition, const_numbertwo);
      end;

      j := startposition + const_numbertwo;

      if ((somesymbolsfromcode = const_thestartofcomments) and
        ((length(phpcode) - const_numberone) >= startposition)) then
      begin

        while ((copy(phpcode, j, const_numbertwo) <> const_theendofcomments) and
          ((length(phpcode) - const_numberone) >= j)) do
        begin
          inc(j);
        end;

        delete(phpcode, startposition, j - startposition + const_numbertwo);
      end;
    end;

    startposition := const_numberone;

    while startposition <= (length(phpcode) - const_numberseven) do
    begin
      somesymbolsfromcode := copy(phpcode, startposition, const_numbertwo);

      if somesymbolsfromcode = const_thelineofcomments then
      begin
        j := startposition;
        somesymbolsfromcode := copy(phpcode, j, const_numbersix);

        while somesymbolsfromcode <> const_theendofline do
        begin
          inc(j);
          somesymbolsfromcode := copy(phpcode, j, const_numbersix);
        end;

        delete(phpcode, startposition, j - startposition);
        j := startposition;
        dec(j);

        while (copy(phpcode, j, const_numberone) = const_thespace) or
          (copy(phpcode, j - const_numberfive, const_numbersix) <>
          const_theendofline) do
          dec(j);

        if (copy(phpcode, j - const_numberfive, const_numbersix)
          = const_theendofline) then
          delete(phpcode, j, startposition - j + const_numberfive);

      end;

      if copy(phpcode, startposition, const_numbertwo) <> const_thelineofcomments
      then
        inc(startposition);

    end;

    startposition := const_numberone;
    flagforconditionschecking := false;

    while startposition <= (length(phpcode) - const_numberseven) do
    begin
      somesymbolsfromcode := copy(phpcode, startposition, const_numberone);

      if somesymbolsfromcode = const_thedoublequote then
      begin
        inc(startposition);
        j := startposition;
        somesymbolsfromcode := copy(phpcode, j, const_numberone);

        while (somesymbolsfromcode <> const_thedoublequote) and
          (j <= length(phpcode)) do
        begin
          inc(j);
          somesymbolsfromcode := copy(phpcode, j, const_numberone);
        end;

        delete(phpcode, startposition, j - startposition);

      end;

      inc(startposition);
    end;
    startposition := const_numberone;

    while startposition <= (length(phpcode) - const_numberseven) do
    begin

      if ansilowercase(copy(phpcode, startposition, const_numbereight)) = const_theglobals
      then
      begin
        delete(phpcode, startposition, const_numbereight);
        flagforconditionschecking := true;

        while copy(phpcode, startposition, const_numberone) <> const_thequote do
          inc(startposition);
      end;

      somesymbolsfromcode := copy(phpcode, startposition, const_numberone);

      if somesymbolsfromcode = const_thequote then
      begin
        inc(startposition);
        j := startposition;

        while (copy(phpcode, j, const_numberone) <> const_thequote) and
          (j <= length(phpcode)) do
          inc(j);

        if flagforconditionschecking then
        begin

          if firstofsubroutinevariables = nil then
          begin
            new(subroutinevariables);
            subroutinevariables^.thevariables := const_thedollar +
              copy(phpcode, startposition, j - startposition);
            subroutinevariables^.next := nil;
            firstofsubroutinevariables := subroutinevariables;
          end
          else if findinlistofsubroutinevariables(subroutinevariables,
            firstofsubroutinevariables, copy(phpcode, startposition,
            j - startposition)) then
            addtolistofsubroutinevariables(subroutinevariables,
              const_thedollar + copy(phpcode, startposition,
              j - startposition));

          while copy(phpcode, j, const_numbersix) <> const_theendofline do
            inc(j);

          flagforconditionschecking := false;
        end;
      end;
      inc(startposition);
    end;
    startposition := const_numberone;

    while startposition <= (length(phpcode) - const_numbersix) do
    begin
      skipthesubroutine(phpcode, const_theprocedure, const_numbernine,
        startposition, setofsymbols, indexofsubroutins,
        indexofglobalvariablesinsubroutins);
      skipthesubroutine(phpcode, const_thefunction, const_numbereight,
        startposition, setofsymbols, indexofsubroutins,
        indexofglobalvariablesinsubroutins);
      skipthealgorithm(phpcode, const_thefor, const_numberthree, startposition);
      skipthealgorithm(phpcode, const_theif, const_numbertwo, startposition);
      skipthealgorithm(phpcode, const_theecho, const_numberfour, startposition);
      skipthealgorithm(phpcode, const_theclass, const_numberfive,
        startposition);

      if copy(phpcode, startposition, const_numberone) = const_thedollar then
      begin
        j := startposition;

        while not(phpcode[j] in setofsymbols) do
          inc(j);

        if thefirstvariables = nil then
        begin
          new(thevariables);
          thevariables^.thevariables := copy(phpcode, startposition,
            j - startposition);
          thevariables^.next := nil;
          thefirstvariables := thevariables;
          inc(indexofglobalvariables);
        end
        else
        begin
          if findinlistofvariables(thevariables, thefirstvariables,
            copy(phpcode, startposition, j - startposition)) then
          begin
            addtolistofvariables(thevariables, copy(phpcode, startposition,
              j - startposition));
            inc(indexofglobalvariables);
          end;
        end;

        startposition := j;
      end
      else
        inc(startposition);
    end;

    thevariables := thefirstvariables;
    windowsformetrick.text := 'The vars in main body of programm:';

    while thevariables <> nil do
    begin
      windowsformetrick.lines.Add(thevariables^.thevariables);
      thevariables := thevariables^.next;
    end;

    windowsformetrick.lines.Add('The global vars in subroutines are:');
    subroutinevariables := firstofsubroutinevariables;

    while subroutinevariables <> nil do
    begin
      windowsformetrick.lines.Add(subroutinevariables^.thevariables);
      subroutinevariables := subroutinevariables^.next;
    end;

    textforwindowsformetric(windowsformetrick, indexofglobalvariables,
      indexofsubroutins, indexofglobalvariablesinsubroutins);
    if indexofsubroutins = const_numberzero then
      showmessage('The subroutines not founded')
    else if indexofglobalvariables = const_numberzero then
      showmessage('The vars in main body of programm not founded')
    else
      windowsformetrick.lines.Add(floattostr(indexofglobalvariablesinsubroutins
        / (indexofsubroutins * indexofglobalvariables)));
  end
  else
  begin
    showmessage('PHP code did not found');
    exit;
  end;
end;

end.
